//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(identifier: "com.jince.TurnOnVPN") ?? Bundle.main
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `Acknowledgements.plist`.
    static let acknowledgementsPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "Acknowledgements", pathExtension: "plist")
    
    /// `bundle.url(forResource: "Acknowledgements", withExtension: "plist")`
    static func acknowledgementsPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.acknowledgementsPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 0 images.
  struct image {
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 8 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AcknowledgementCell`.
    static let acknowledgementCell: Rswift.ReuseIdentifier<AcknowledgementCell> = Rswift.ReuseIdentifier(identifier: "AcknowledgementCell")
    /// Reuse identifier `AddCell`.
    static let addCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "AddCell")
    /// Reuse identifier `ConnectionCell`.
    static let connectionCell: Rswift.ReuseIdentifier<VPNSwitchCell> = Rswift.ReuseIdentifier(identifier: "ConnectionCell")
    /// Reuse identifier `DomainsCell`.
    static let domainsCell: Rswift.ReuseIdentifier<VPNTableViewCell> = Rswift.ReuseIdentifier(identifier: "DomainsCell")
    /// Reuse identifier `OnDemandCell`.
    static let onDemandCell: Rswift.ReuseIdentifier<VPNSwitchCell> = Rswift.ReuseIdentifier(identifier: "OnDemandCell")
    /// Reuse identifier `VPNCell`.
    static let vPNCell: Rswift.ReuseIdentifier<VPNTableViewCell> = Rswift.ReuseIdentifier(identifier: "VPNCell")
    /// Reuse identifier `deleteButton`.
    static let deleteButton: Rswift.ReuseIdentifier<TableViewActionCell> = Rswift.ReuseIdentifier(identifier: "deleteButton")
    /// Reuse identifier `duplicateButton`.
    static let duplicateButton: Rswift.ReuseIdentifier<TableViewActionCell> = Rswift.ReuseIdentifier(identifier: "duplicateButton")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}

struct _R {
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard {
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UISplitViewController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}